<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="334" onload="init(evt)" viewBox="0 0 1200 334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="334.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Example</text>
<text id="subtitle" x="600.00" y="48" >Bytes allocated</text>
<text id="details" x="10.00" y="317" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="317" > </text>
<g id="frames">
<g >
<title>Data.Vector.Primitive.Mutable.basicUnsafeWrite (387,520 bytes, 0.08%)</title><rect x="71.6" y="141" width="0.9" height="15.0" fill="rgb(221,154,14)" rx="2" ry="2" />
<text  x="74.63" y="151.5" ></text>
</g>
<g >
<title>Example.sieve (9,566,672 bytes, 1.90%)</title><rect x="75.8" y="205" width="22.4" height="15.0" fill="rgb(249,0,24)" rx="2" ry="2" />
<text  x="78.84" y="215.5" >E..</text>
</g>
<g >
<title>Example.primes.large (9,566,672 bytes, 1.90%)</title><rect x="75.8" y="221" width="22.4" height="15.0" fill="rgb(242,76,42)" rx="2" ry="2" />
<text  x="78.84" y="231.5" >E..</text>
</g>
<g >
<title>Example.primes.spin (731,664 bytes, 0.15%)</title><rect x="74.1" y="205" width="1.7" height="15.0" fill="rgb(230,106,48)" rx="2" ry="2" />
<text  x="77.13" y="215.5" ></text>
</g>
<g >
<title>Example.countSemiprimes.noOfSemiprimes (27,261,000 bytes, 5.40%)</title><rect x="10.4" y="205" width="63.7" height="15.0" fill="rgb(240,78,16)" rx="2" ry="2" />
<text  x="13.35" y="215.5" >Example..</text>
</g>
<g >
<title>all (504,399,960 bytes, 100%)</title><rect x="10.0" y="285" width="1180.0" height="15.0" fill="rgb(252,124,22)" rx="2" ry="2" />
<text  x="13.00" y="295.5" ></text>
</g>
<g >
<title>Example.isNSemiprime.nSemiprimes (678,192 bytes, 0.13%)</title><rect x="72.5" y="173" width="1.6" height="15.0" fill="rgb(212,127,26)" rx="2" ry="2" />
<text  x="75.54" y="183.5" ></text>
</g>
<g >
<title>Data.List.Ordered.unionBy (463,833,136 bytes, 91.96%)</title><rect x="99.2" y="189" width="1085.1" height="15.0" fill="rgb(241,215,20)" rx="2" ry="2" />
<text  x="102.15" y="199.5" >Data.List.Ordered.unionBy</text>
</g>
<g >
<title>Data.Vector.Fusion.Util.&gt;&gt;= (2,000,040 bytes, 0.40%)</title><rect x="58.5" y="173" width="4.7" height="15.0" fill="rgb(219,161,39)" rx="2" ry="2" />
<text  x="61.53" y="183.5" ></text>
</g>
<g >
<title>Example.countSemiprimes (27,261,072 bytes, 5.40%)</title><rect x="10.4" y="221" width="63.7" height="15.0" fill="rgb(238,53,40)" rx="2" ry="2" />
<text  x="13.35" y="231.5" >Example..</text>
</g>
<g >
<title>Example.primesTo (874,336 bytes, 0.17%)</title><rect x="1187.9" y="189" width="2.0" height="15.0" fill="rgb(210,43,7)" rx="2" ry="2" />
<text  x="1190.86" y="199.5" ></text>
</g>
<g >
<title>Data.Vector.Fusion.Stream.Monadic.fmap (5,200,224 bytes, 1.03%)</title><rect x="45.9" y="173" width="12.2" height="15.0" fill="rgb(251,174,51)" rx="2" ry="2" />
<text  x="48.91" y="183.5" ></text>
</g>
<g >
<title>Example.semiprimes.facts (2,416,032 bytes, 0.48%)</title><rect x="1184.3" y="205" width="5.6" height="15.0" fill="rgb(237,186,48)" rx="2" ry="2" />
<text  x="1187.25" y="215.5" ></text>
</g>
<g >
<title>Control.Monad.Primitive.primitive (400,048 bytes, 0.08%)</title><rect x="67.0" y="157" width="0.9" height="15.0" fill="rgb(211,192,1)" rx="2" ry="2" />
<text  x="69.96" y="167.5" ></text>
</g>
<g >
<title>Example.sieve.crossoff (1,265,008 bytes, 0.25%)</title><rect x="95.3" y="173" width="2.9" height="15.0" fill="rgb(220,209,29)" rx="2" ry="2" />
<text  x="98.26" y="183.5" ></text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.incr (484,432 bytes, 0.10%)</title><rect x="97.1" y="125" width="1.1" height="15.0" fill="rgb(241,110,28)" rx="2" ry="2" />
<text  x="100.09" y="135.5" ></text>
</g>
<g >
<title>MAIN (504,399,960 bytes, 100.00%)</title><rect x="10.0" y="269" width="1180.0" height="15.0" fill="rgb(241,160,24)" rx="2" ry="2" />
<text  x="13.00" y="279.5" >MAIN</text>
</g>
<g >
<title>Data.Vector.Primitive.Mutable.basicUnsafeSlice (1,600,064 bytes, 0.32%)</title><rect x="67.9" y="173" width="3.7" height="15.0" fill="rgb(246,62,7)" rx="2" ry="2" />
<text  x="70.89" y="183.5" ></text>
</g>
<g >
<title>Data.Vector.Unboxed.Base.basicUnsafeWrite (2,000,096 bytes, 0.40%)</title><rect x="53.4" y="157" width="4.7" height="15.0" fill="rgb(229,169,3)" rx="2" ry="2" />
<text  x="56.40" y="167.5" ></text>
</g>
<g >
<title>Data.Vector.Primitive.Mutable.basicUnsafeNew (400,184 bytes, 0.08%)</title><rect x="67.0" y="173" width="0.9" height="15.0" fill="rgb(220,144,24)" rx="2" ry="2" />
<text  x="69.96" y="183.5" ></text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.insert (749,104 bytes, 0.15%)</title><rect x="96.5" y="157" width="1.7" height="15.0" fill="rgb(219,157,29)" rx="2" ry="2" />
<text  x="99.47" y="167.5" ></text>
</g>
<g >
<title>Data.Vector.Primitive.Mutable.basicUnsafeWrite (2,000,096 bytes, 0.40%)</title><rect x="53.4" y="141" width="4.7" height="15.0" fill="rgb(243,21,44)" rx="2" ry="2" />
<text  x="56.40" y="151.5" ></text>
</g>
<g >
<title>Example.sieve.crossoff (54,064 bytes, 0.01%)</title><rect x="75.8" y="189" width="0.2" height="15.0" fill="rgb(209,6,39)" rx="2" ry="2" />
<text  x="78.84" y="199.5" ></text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.incr (623,920 bytes, 0.12%)</title><rect x="93.8" y="109" width="1.5" height="15.0" fill="rgb(232,224,4)" rx="2" ry="2" />
<text  x="96.80" y="119.5" ></text>
</g>
<g >
<title>Data.Vector.Fusion.Util.&gt;&gt;= (14,194,320 bytes, 2.81%)</title><rect x="25.3" y="189" width="33.2" height="15.0" fill="rgb(250,15,32)" rx="2" ry="2" />
<text  x="28.33" y="199.5" >Da..</text>
</g>
<g >
<title>Example.CAF:primesTo10 (731,720 bytes, 0.15%)</title><rect x="74.1" y="253" width="1.7" height="15.0" fill="rgb(236,8,2)" rx="2" ry="2" />
<text  x="77.13" y="263.5" ></text>
</g>
<g >
<title>Example.primes (9,566,672 bytes, 1.90%)</title><rect x="75.8" y="237" width="22.4" height="15.0" fill="rgb(205,87,50)" rx="2" ry="2" />
<text  x="78.84" y="247.5" >E..</text>
</g>
<g >
<title>Example.sieve.reinsert (1,194,480 bytes, 0.24%)</title><rect x="92.5" y="157" width="2.8" height="15.0" fill="rgb(238,199,51)" rx="2" ry="2" />
<text  x="95.47" y="167.5" ></text>
</g>
<g >
<title>Example.primes (731,720 bytes, 0.15%)</title><rect x="74.1" y="237" width="1.7" height="15.0" fill="rgb(212,2,50)" rx="2" ry="2" />
<text  x="77.13" y="247.5" ></text>
</g>
<g >
<title>Data.Vector.Primitive.basicUnsafeIndexM (1,600,048 bytes, 0.32%)</title><rect x="63.2" y="173" width="3.8" height="15.0" fill="rgb(254,5,13)" rx="2" ry="2" />
<text  x="66.21" y="183.5" ></text>
</g>
<g >
<title>Example.sieve.sieve' (9,512,448 bytes, 1.89%)</title><rect x="76.0" y="189" width="22.2" height="15.0" fill="rgb(210,97,39)" rx="2" ry="2" />
<text  x="78.97" y="199.5" >E..</text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.insert' (528,544 bytes, 0.10%)</title><rect x="97.0" y="141" width="1.2" height="15.0" fill="rgb(242,73,14)" rx="2" ry="2" />
<text  x="99.99" y="151.5" ></text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.insert' (680,976 bytes, 0.14%)</title><rect x="93.7" y="125" width="1.6" height="15.0" fill="rgb(240,209,26)" rx="2" ry="2" />
<text  x="96.67" y="135.5" ></text>
</g>
<g >
<title>Example.countSemiprimes.noOfSemiprimes.\ (193,760 bytes, 0.04%)</title><rect x="58.1" y="173" width="0.4" height="15.0" fill="rgb(206,69,23)" rx="2" ry="2" />
<text  x="61.08" y="183.5" ></text>
</g>
<g >
<title>Example.semiprimes.\ (466,359,664 bytes, 92.46%)</title><rect x="98.9" y="221" width="1091.0" height="15.0" fill="rgb(209,187,22)" rx="2" ry="2" />
<text  x="101.89" y="231.5" >Example.semiprimes.\</text>
</g>
<g >
<title>Data.Vector.Unboxed.Base.basicUnsafeWrite (387,520 bytes, 0.08%)</title><rect x="71.6" y="157" width="0.9" height="15.0" fill="rgb(222,218,42)" rx="2" ry="2" />
<text  x="74.63" y="167.5" ></text>
</g>
<g >
<title>Data.Vector.Unboxed.Base.basicUnsafeSlice (1,600,064 bytes, 0.32%)</title><rect x="67.9" y="189" width="3.7" height="15.0" fill="rgb(224,34,39)" rx="2" ry="2" />
<text  x="70.89" y="199.5" ></text>
</g>
<g >
<title>Example.isNSemiprime (1,065,792 bytes, 0.21%)</title><rect x="71.6" y="189" width="2.5" height="15.0" fill="rgb(218,91,27)" rx="2" ry="2" />
<text  x="74.63" y="199.5" ></text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.incr (2,060,400 bytes, 0.41%)</title><rect x="87.6" y="61" width="4.9" height="15.0" fill="rgb(229,46,4)" rx="2" ry="2" />
<text  x="90.65" y="71.5" ></text>
</g>
<g >
<title>Example.sieve.adjust (7,755,696 bytes, 1.54%)</title><rect x="77.1" y="173" width="18.2" height="15.0" fill="rgb(247,172,12)" rx="2" ry="2" />
<text  x="80.12" y="183.5" ></text>
</g>
<g >
<title>CAF:run32 (27,261,072 bytes, 5.40%)</title><rect x="10.4" y="253" width="63.7" height="15.0" fill="rgb(238,31,9)" rx="2" ry="2" />
<text  x="13.35" y="263.5" >CAF:run32</text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.extractHeap (6,361,520 bytes, 1.26%)</title><rect x="77.6" y="109" width="14.9" height="15.0" fill="rgb(252,172,39)" rx="2" ry="2" />
<text  x="80.59" y="119.5" ></text>
</g>
<g >
<title>Data.Vector.Unboxed.Base.basicUnsafeIndexM (3,600,088 bytes, 0.71%)</title><rect x="58.5" y="189" width="8.5" height="15.0" fill="rgb(252,182,53)" rx="2" ry="2" />
<text  x="61.53" y="199.5" ></text>
</g>
<g >
<title>Example.isNSemiprime.\ (387,520 bytes, 0.08%)</title><rect x="71.6" y="173" width="0.9" height="15.0" fill="rgb(247,113,19)" rx="2" ry="2" />
<text  x="74.63" y="183.5" ></text>
</g>
<g >
<title>Example.semiprimes (466,647,008 bytes, 92.52%)</title><rect x="98.2" y="237" width="1091.7" height="15.0" fill="rgb(238,59,37)" rx="2" ry="2" />
<text  x="101.22" y="247.5" >Example.semiprimes</text>
</g>
<g >
<title>Data.List.Ordered.unionBy.loop (463,788,944 bytes, 91.95%)</title><rect x="99.3" y="173" width="1085.0" height="15.0" fill="rgb(225,2,45)" rx="2" ry="2" />
<text  x="102.26" y="183.5" >Data.List.Ordered.unionBy.loop</text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.minViewWithKey (6,361,520 bytes, 1.26%)</title><rect x="77.6" y="125" width="14.9" height="15.0" fill="rgb(234,44,8)" rx="2" ry="2" />
<text  x="80.59" y="135.5" ></text>
</g>
<g >
<title>Data.Vector.Unboxed.Base.basicUnsafeNew (400,184 bytes, 0.08%)</title><rect x="67.0" y="189" width="0.9" height="15.0" fill="rgb(237,183,39)" rx="2" ry="2" />
<text  x="69.96" y="199.5" ></text>
</g>
<g >
<title>Example.CAF:semiprimes_$ssemiprimes (466,647,008 bytes, 92.52%)</title><rect x="98.2" y="253" width="1091.7" height="15.0" fill="rgb(241,173,52)" rx="2" ry="2" />
<text  x="101.22" y="263.5" >Example.CAF:semiprimes_$ssemiprimes</text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.extractForest (6,218,880 bytes, 1.23%)</title><rect x="77.9" y="93" width="14.6" height="15.0" fill="rgb(250,26,17)" rx="2" ry="2" />
<text  x="80.92" y="103.5" ></text>
</g>
<g >
<title>Data.List.Ordered.union (463,833,136 bytes, 91.96%)</title><rect x="99.2" y="205" width="1085.1" height="15.0" fill="rgb(215,24,11)" rx="2" ry="2" />
<text  x="102.15" y="215.5" >Data.List.Ordered.union</text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.incrExtract (2,537,760 bytes, 0.50%)</title><rect x="86.5" y="77" width="6.0" height="15.0" fill="rgb(240,49,54)" rx="2" ry="2" />
<text  x="89.53" y="87.5" ></text>
</g>
<g >
<title>Example.primes.large (731,720 bytes, 0.15%)</title><rect x="74.1" y="221" width="1.7" height="15.0" fill="rgb(210,113,19)" rx="2" ry="2" />
<text  x="77.13" y="231.5" ></text>
</g>
<g >
<title>Example.sieve.adjust.(...) (6,361,520 bytes, 1.26%)</title><rect x="77.6" y="157" width="14.9" height="15.0" fill="rgb(248,173,48)" rx="2" ry="2" />
<text  x="80.59" y="167.5" ></text>
</g>
<g >
<title>Example.CAF:primesTo8 (9,566,672 bytes, 1.90%)</title><rect x="75.8" y="253" width="22.4" height="15.0" fill="rgb(230,53,48)" rx="2" ry="2" />
<text  x="78.84" y="263.5" >E..</text>
</g>
<g >
<title>Example.semiprimesTo (678,192 bytes, 0.13%)</title><rect x="72.5" y="157" width="1.6" height="15.0" fill="rgb(249,146,36)" rx="2" ry="2" />
<text  x="75.54" y="167.5" ></text>
</g>
<g >
<title>run (27,261,072 bytes, 5.40%)</title><rect x="10.4" y="237" width="63.7" height="15.0" fill="rgb(248,229,30)" rx="2" ry="2" />
<text  x="13.35" y="247.5" >run</text>
</g>
<g >
<title>Data.PQueue.Prio.Min.deleteFindMin (6,361,520 bytes, 1.26%)</title><rect x="77.6" y="141" width="14.9" height="15.0" fill="rgb(245,1,30)" rx="2" ry="2" />
<text  x="80.59" y="151.5" ></text>
</g>
<g >
<title>Data.PQueue.Prio.Internals.insert (966,256 bytes, 0.19%)</title><rect x="93.0" y="141" width="2.3" height="15.0" fill="rgb(223,21,48)" rx="2" ry="2" />
<text  x="96.00" y="151.5" ></text>
</g>
</g>
</svg>
